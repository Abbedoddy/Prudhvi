# -*- coding: utf-8 -*-
"""Abstarction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GKuMx335EINc80t_qZFU_B9M_xW5eYfE
"""

# Abstraction - Hiding unnecessary information & providing only required information to user
# Class - Blueprint of an object
# Abstract class - Blueprint of the classes
# abc module - basic structure of the class
# ABC - abstract class, @abstractmethod - Absract method

from abc import ABC,abstractmethod
class user_defined_class(ABC):

  def details(self):
    print("Class A details")
  
  @abstractmethod
  def display(self):
    pass

class child1(user_defined_class):
  def display(self):
    pass

child_obj = child1()
print(child_obj)

# Abstraction
from abc import ABC,abstractmethod
class OTT(ABC):
    def movies(self):
        print("Can watch movies")    
    def webshows(self):
        print("Can watch webshows")
    @abstractmethod
    def rest_content(self):
        pass

class Netflix(OTT):
    def rest_content(self):
        print("Interntional movies & webshows can be watched in Netflix")

class Hotstar(OTT):
    def movies(self):
        print("Only movies & webshows can be watched from Hotstar only")
    def rest_content(self):
        print("Sports along with Movies & Webshows can be watched in Hotstar")

class SonyLiv(OTT):
  def rest_content(self):
        print("TV shows can be watched in Sonyliv")
  pass
        

# n = Netflix()
# n.movies()
# n.webshows()
# n.rest_content()
# h = Hotstar()
# h.movies()
# h.webshows()
# h.rest_content()
s = SonyLiv()
s.movies()
s.webshows()
s.rest_content()