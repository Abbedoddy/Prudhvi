# -*- coding: utf-8 -*-
"""Decorators.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1e-QLN96msxWXE_IEFTFFQChMOihuvCJy
"""

def solution(A):
	for i in range(1,len(A)+1): # 1,2,3,4
		if i not in A:
			return i
  
print(solution([3,1,5,2])) # 4

# a = int(input("Enter the number"))
# b = int(input("Enter the number"))
# c = a+b
# print(c)

def func1(a,b):
  print(a+b)

func1(10,20)
func1(35,75)

z = func1
z(44,64)

def func1(a,b):
  def func2(a,b):
    print(a-b)
  print(a+b)
  func2(a,b)

func1(15,10)

def func1():
  def func2(number):
    return number +10
  return func2(10)
print(func1())

def func1(a,b):
  return (a+b)
def func2(function):
  return (function(10,15)*2)

print(func2(func1))

def decor_func(function):
  def wrapper():
    print("Before adding additional functionality")
    function()
    print("after adding additional functionality")
  return wrapper

@decor_func
def func1():
  print("function to be decorated")

@decor_func
def add():
  print("Thsi is addition function")


func1()
print()
add()

def decor_add(abc):
  def wrap(a,b):
    return 100+abc(a,b)
  return wrap

@decor_add
def add(a,b):
  return a+b

print(add(7,4))
print(add(5,8))
print(add(6,9))

def default_dec(function):
  def wrapp(msg):
    return "Hello "+function(msg)
  return wrapp

@default_dec
def deliver(msg):
  return msg


print(deliver("The King is back"))